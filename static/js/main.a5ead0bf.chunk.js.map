{"version":3,"sources":["components/circle.tsx","data.ts","components/mainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CircleContainer","props","clickCircle","index","className","onClick","circleData","id","name","backgroundColor","MainPageDisplay","document","getElementById","src","myPicture","App","useState","currentSelection","setCurrentSelection","useRef","x","console","log","style","transition","top","map","padding","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAUeA,G,MARgB,SAACC,GAA8C,IAClEC,EAAsBD,EAAtBC,YAAaC,EAASF,EAATE,MACrB,OACI,yBAAKC,UAAU,aAAaC,QAAS,kBAAMH,EAAYC,QCLlDG,EAAa,CACtB,CACIC,GAAI,EACJC,KAAM,OACNC,gBAAiB,WAErB,CACIF,GAAI,EACJC,KAAM,WACNC,gBAAiB,OAErB,CACIF,GAAI,EACJC,KAAM,SACNC,gBAAiB,SCTZC,EAAkB,WACZC,SAASC,eAAe,iBAEvC,OACI,oCACI,yBAAKC,IANI,kCAMeN,GAAG,uBAC3B,yBAAKH,UAAU,cACX,wBAAIA,UAAU,kBAAd,QACA,wBAAIA,UAAU,kBAAd,yBCLVU,EAAY,4BA4CHC,MA3Cf,WAAgB,IAAD,EACmCC,mBAAS,GAD5C,mBACNC,EADM,KACYC,EADZ,KAGPhB,GADciB,iBAAOb,EAAW,IAClB,SAACc,GACnBC,QAAQC,IAAIF,GACZF,EAAoBE,KAGtB,OACE,yBAAKhB,UAAU,MAAMmB,MAAO,CAACd,gBAAgB,GAAD,OAAKH,EAAWW,GAAoBX,EAAWW,GAAkBR,gBAAiBH,EAAW,GAAGG,iBAAmBe,WAAY,uBACzK,yBAAKX,IAAKC,EAAWV,UAAU,8BAC/B,yBAAKS,IAAKC,EAAWV,UAAU,qBAC/B,yBAAKS,IAAKC,EAAWV,UAAU,qBAC/B,yBAAKS,IAAKC,EAAWV,UAAU,eAC7Ba,EAGQ,8BADJ,kBAAC,EAAD,MAKN,yBAAKb,UAAU,mBAAmBmB,MAAO,CAACE,IAAI,GAAD,OAAKR,EAAmB,MAAO,OAASO,WAAY,WAC9F,CAAC,EAAE,EAAE,EAAE,GAAGE,KAAI,SAACN,GACd,OACE,yBAAKG,MAAO,CAACI,QAAS,MAAOC,IAAG,cAASR,IACvC,kBAAC,EAAD,CACElB,YAAaA,EACbC,MAAOiB,QAKdH,EAEG,yBAAKb,UAAU,cAAcC,QAAS,kBAAMH,EAAY,KAAxD,UACI,iCChCI2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAASC,eAAe,SDyHpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.a5ead0bf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const CircleContainer = (props: {clickCircle: any, index: number}) => {\r\n    const  {clickCircle, index} = props;\r\n    return (\r\n        <div className='Circle-div' onClick={() => clickCircle(index)}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CircleContainer;","export const circleData = [\r\n    {\r\n        id: 0,\r\n        name: 'none',\r\n        backgroundColor: '#4f8a8b',\r\n    },\r\n    {\r\n        id: 1,\r\n        name: 'yeelight',\r\n        backgroundColor: 'red',\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'tasker',\r\n        backgroundColor: 'blue',\r\n    },\r\n]","import React from 'react';\r\n// import rough from 'roughjs';\r\n// import rough from 'roughjs/bundled/rough.esm.js'; \r\n\r\nconst rotatedArrow = '/assets/rotated-right-arrow.svg'\r\nexport const MainPageDisplay = (): any => {\r\n    const canvas = document.getElementById('canvasElement') as HTMLCanvasElement;\r\n    // const rc = rough.canvas(canvas);\r\n    return (\r\n        <>\r\n            <img src={rotatedArrow} id='rotated-arrow-main' />\r\n            <div className=\"name-title\">\r\n                <h1 className=\"greeting-title\"> Hi,</h1>\r\n                <h1 className=\"main-body-name\"> MY NAME IS HAMMAD</h1>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPageDisplay;","import React, {useState, useEffect, useRef} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport CircleContainer from './components/circle'\r\nimport {circleData} from './data';\r\nimport {MainPageDisplay} from './components/mainPage';\r\n\r\n\r\nconst myPicture = '/assets/MyImage-no-bg.png'\r\nfunction App() {\r\n  const [currentSelection, setCurrentSelection] = useState(0);\r\n  const currentData = useRef(circleData[0]);\r\n  const clickCircle = (x: number) => {\r\n    console.log(x)\r\n    setCurrentSelection(x)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" style={{backgroundColor: `${circleData[currentSelection] ? circleData[currentSelection].backgroundColor: circleData[0].backgroundColor}`, transition: 'backgroundColor 5s'}}>\r\n      <img src={myPicture} className='my-picture border-picture' />\r\n      <img src={myPicture} className='my-picture blur2' />\r\n      <img src={myPicture} className='my-picture blur1' />\r\n      <img src={myPicture} className='my-picture' />\r\n      {!currentSelection ?\r\n          (\r\n            <MainPageDisplay />\r\n          ) : ( <div></div>)\r\n      }\r\n      \r\n\r\n      <div className='Center-container' style={{top: `${currentSelection ? '10%': '60%'}`, transition: 'top 1s'}}>\r\n        {[1,2,3,4].map((x: any) => {\r\n          return(\r\n            <div style={{padding: '2%'}} key={`key-${x}`}>\r\n              <CircleContainer \r\n                clickCircle={clickCircle}\r\n                index={x}\r\n              />\r\n            </div>\r\n          )\r\n        })}\r\n        {currentSelection ?\r\n          (\r\n            <div className=\"close-emoji\" onClick={() => clickCircle(0)}>‚ùå</div>\r\n          ) : ( <div></div>)\r\n        }\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import { createGlobalStyle } from 'styled-components';\r\n\r\n// const getFont = './assets/black-font.ttf'\r\n// const GlobalStyles = createGlobalStyle`\r\n//   body {\r\n//     @import url(${getFont});\r\n//     font-family: 'Black Vosten Personal Use';\r\n//   }`\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}